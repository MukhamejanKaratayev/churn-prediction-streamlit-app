import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import pickle
import plotly.express as px


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Churn Prediction App",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uploaded_file = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df_input' not in st.session_state:
    st.session_state['df_input'] = pd.DataFrame()

if 'df_predicted' not in st.session_state:
    st.session_state['df_predicted'] = pd.DataFrame()

if 'tab_selected' not in st.session_state:
    st.session_state['tab_selected'] = None

def reset_session_state():
    st.session_state['df_input'] = pd.DataFrame()
    st.session_state['df_predicted'] = pd.DataFrame()

# ML section start
numerical = ['tenure', 'monthlycharges', 'totalcharges']
categorical = ['gender',
'seniorcitizen',
'partner',
'dependents',
'phoneservice',
'multiplelines',
'internetservice',
'onlinesecurity',
'onlinebackup',
'deviceprotection',
'techsupport',
'streamingtv',
'streamingmovies',
'contract',
'paperlessbilling',
'paymentmethod']
le_enc_cols = ['gender', 'partner', 'dependents','paperlessbilling', 'phoneservice']
gender_map = {'male': 0, 'female': 1}
y_n_map = {'yes': 1, 'no': 0}

# logistic regression model
model_file_path = 'models/lr_model_churn_prediction.sav'
model = pickle.load(open(model_file_path, 'rb'))

# encoding model DictVectorizer
encoding_model_file_path = 'models/encoding_model.sav'
encoding_model = pickle.load(open(encoding_model_file_path, 'rb'))

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
@st.cache_data
def predict_churn(df_input, treshold):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
    scaler = MinMaxScaler()

    df_original = df_input.copy()
    df_input[numerical] = scaler.fit_transform(df_input[numerical])

    for col in le_enc_cols:
        if col == 'gender':
            df_input[col] = df_input[col].map(gender_map)
        else:
            df_input[col] = df_input[col].map(y_n_map)

    dicts_df = df_input[categorical + numerical].to_dict(orient='records')
    X = encoding_model.transform(dicts_df)
    # X[np.isnan(X)] = 0
    y_pred = model.predict_proba(X)[:, 1]
    churn_descision = (y_pred >= treshold).astype(int)
    df_original['churn_predicted'] = churn_descision
    df_original['churn_predicted_probability'] = y_pred

    return df_original


@st.cache_data
def convert_df(df):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ csv
    return df.to_csv(index=False).encode('utf-8')

# Sidebar section start
# –°–∞–π–¥–±–∞—Ä –±–ª–æ–∫
with st.sidebar:
    st.title('üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
    
    tab1, tab2 = st.tabs(['üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞', 'üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'])
    with tab1:
        # –í–∫–ª–∞–¥–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 1)
        uploaded_file = st.file_uploader("–í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª", type=['csv', 'xlsx'], on_change=reset_session_state)
        if uploaded_file is not None:
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞', 0.0, 1.0, 0.5, 0.01, key='slider1')
            prediction_button = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button1')
            st.session_state['df_input'] = pd.read_csv(uploaded_file)
            if prediction_button:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'], treshold)
                st.session_state['tab_selected'] = 'tab1'

    with tab2:
        # –í–∫–ª–∞–¥–∫–∞ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 2)
        customer_id = st.text_input('Customer ID', placeholder='0000', help='–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞')
        gender = st.selectbox( '–ü–æ–ª', ('female', 'male'))
        senior_citizen = st.selectbox('–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', ('–î–∞', '–ù–µ—Ç'))
        partner = st.selectbox('–ü–∞—Ä—Ç–Ω–µ—Ä', ('yes', 'no'))
        dependents = st.selectbox('–ò–∂–¥–∏–≤–µ–Ω—Ü—ã', ('yes', 'no'))
        tenure = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', min_value=0, max_value=100, value=0)
        phone_service = st.selectbox('–¢–µ–ª–µ—Ñ–æ–Ω', ('yes', 'no'))
        multiple_lines = st.selectbox('–ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π', ('yes', 'no', 'no_phone_service'))
        internet_service = st.selectbox('–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', ('dsl', 'fiber_optic', 'no'))
        online_security = st.selectbox('–û–Ω–ª–∞–π–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', ('yes', 'no', 'no_internet_service'))
        online_backup = st.selectbox('–û–Ω–ª–∞–π–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', ('yes', 'no', 'no_internet_service'))
        device_protection = st.selectbox('–ó–∞—â–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', ('yes', 'no', 'no_internet_service'))
        tech_support = st.selectbox('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', ('yes', 'no', 'no_internet_service'))
        streaming_tv = st.selectbox('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–µ –¢–í', ('yes', 'no', 'no_internet_service'))
        streaming_movies = st.selectbox('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã', ('yes', 'no', 'no_internet_service'))
        contract = st.selectbox('–ö–æ–Ω—Ç—Ä–∞–∫—Ç', ('month-to-month', 'one_year', 'two_year'))
        paperless_billing = st.selectbox('–ë—É–º–∞–∂–Ω—ã–π —á–µ–∫', ('yes', 'no'))
        payment_method = st.selectbox('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', ('bank_transfer_(automatic)', 'credit_card_(automatic)', 'electronic_check', 'mailed_check'))
        monthly_charges = st.number_input('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=0, max_value=1000, value=0)
        total_charges = st.number_input('–û–±—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏', min_value=0, max_value=100000, value=0)        
        
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –ø–æ—Ä–æ–≥–æ–º –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if customer_id != '':
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞', 0.0, 1.0, 0.5, 0.01, key='slider2')
            prediction_button_tab2 = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button2')
            
            if prediction_button_tab2:
                st.session_state['tab_selected'] = 'tab2'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session state –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
                st.session_state['df_input'] = pd.DataFrame({
                    'customerid': customer_id,
                    'gender': gender,
                    'seniorcitizen': 1 if senior_citizen == '–î–∞' else 0,
                    'partner': partner,
                    'dependents': dependents,
                    'tenure': int(tenure),
                    'phoneservice': phone_service,       
                    'multiplelines': multiple_lines,
                    'internetservice': internet_service,
                    'onlinesecurity': online_security,
                    'onlinebackup': online_backup,
                    'deviceprotection': device_protection,
                    'techsupport': tech_support,
                    'streamingtv': streaming_tv,
                    'streamingmovies': streaming_movies,
                    'contract': contract,
                    'paperlessbilling' : paperless_billing,
                    'paymentmethod': payment_method,
                    'monthlycharges': monthly_charges,
                    'totalcharges': total_charges 
                }, index=[0])
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'], treshold)

                

# Sidebar section end

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
st.image('https://miro.medium.com/v2/resize:fit:1400/1*WqId29D5dN_8DhiYQcHa2w.png', width=400)
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤')

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
    st.write("""
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –î–ª—è —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—à–ª–∏ –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏.
    –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """)

# –í—ã–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
if len(st.session_state['df_input']) > 0:
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ
    if len(st.session_state['df_predicted']) == 0:
        st.subheader('–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        st.write(st.session_state['df_input'])
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ expander
        with st.expander("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(st.session_state['df_input'])
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    # st.line_chart(st.session_state['df_input'][['tenure', 'monthlycharges']])
    # st.bar_chart(st.session_state['df_input'][['contract']])


# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ 2)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab2':
    if st.session_state['df_predicted']['churn_predicted'][0] == 0:
        st.image('https://gifdb.com/images/high/happy-face-steve-carell-the-office-057k667rwmncrjwh.gif', width=200)
        st.subheader(f'–ö–ª–∏–µ–Ω—Ç :green[–æ—Å—Ç–∞–µ—Ç—Å—è] c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(1 - st.session_state["df_predicted"]["churn_predicted_probability"][0]) * 100:.2f}%')
    else:
        st.image('https://media.tenor.com/QFnU4bhN8gMAAAAd/michael-scott-crying.gif', width=200)
        st.subheader(f'–ö–ª–∏–µ–Ω—Ç :red[—É—Ö–æ–¥–∏—Ç] c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(st.session_state["df_predicted"]["churn_predicted_probability"][0]) * 100:.2f}%')


# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª–∞–¥–∫–∞ 1)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab1':
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.write(st.session_state['df_predicted'])
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    res_all_csv = convert_df(st.session_state['df_predicted'])
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
        data=res_all_csv,
        file_name='df-churn-predicted-all.csv',
        mime='text/csv',
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    fig = px.histogram(st.session_state['df_predicted'], x='churn_predicted', color='churn_predicted')
    st.plotly_chart(fig, use_container_width=True)

    # –ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    risk_clients = st.session_state['df_predicted'][st.session_state['df_predicted']['churn_predicted'] == 1]
    # –í—ã–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    if len(risk_clients) > 0:
        st.subheader('–ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞')
        st.write(risk_clients)
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
        res_risky_csv = convert_df(risk_clients)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞",
            data=res_risky_csv,
            file_name='df-churn-predicted-risk-clients.csv',
            mime='text/csv',
        )